@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using SmartWorkoutDataAccess.Entities
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using SmartWorkoutDataAccess.Repositories
@inject IGenericRepository<User> user_repo


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">SmartWorkout</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <AuthorizeView Roles="1,2">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href=@{$"/workoutsUserId={@user_id}"}>
                        <img src="Images/dumbbell_icon_white.png" alt="Users" class="nav-icon" /> My Workouts
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href=@{
                        $"/userdetails"
}>
                        <img src="Images/User_icon_white.png" alt="Users" class="nav-icon" /> My Account
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="2">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="exercises">
                        <img src="Images/dumbbell_icon_white.png" alt="Exercises" class="nav-icon" /> Exercises
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="users">
                        <img src="Images/User_icon_white.png" alt="Users" class="nav-icon" /> Users
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="login">
                        <img src="Images/User_icon_white.png" alt="Users" class="nav-icon" /> Login
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="ClientOrTrainer">
                        <img src="Images/User_icon_white.png" alt="Users" class="nav-icon" /> Register
                    </NavLink>
                </div>
            </NotAuthorized>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="logout">
                        <img src="Images/User_icon_white.png" alt="Users" class="nav-icon" /> Logout
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>
        
    </nav>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public string user_id = "Not logged in";

    private async Task GetUserId()
    {
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == "UserID");
            if (userIdClaim != null)
            {
                user_id = userIdClaim.Value;
            }
            else
            {
                user_id = "User ID claim not found";
            }
        }
        else
        {
            user_id = "Not authenticated";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
    }
}