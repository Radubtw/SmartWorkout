@page "/updateUserFormId={id}"
@using SmartWorkoutDataAccess.Entities
@using SmartWorkoutDataAccess
@using SmartWorkoutDataAccess.Repositories
@inject IGenericRepository<User> user_repo
@inject NavigationManager NavManager
@rendermode InteractiveServer

<div class="form_container">
    <div class="form_title">Update User</div>

    <EditForm Model="@user" OnValidSubmit="@Submit" FormName="user_update">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form_input">
            <div>Name</div>
            <InputText @bind-Value="user.Name" />
            <ValidationMessage For="@(() => user.Name)" />
        </div>
        <div class="form_input">
            <div>Surname</div>
            <InputText @bind-Value="user.Surname" />
            <ValidationMessage For="@(() => user.Surname)" />
        </div>
        <div class="form_input">
            <div>Phone</div>
            <InputText @bind-Value="user.Phone" />
            <ValidationMessage For="@(() => user.Phone)" />
        </div>
        <div class="form_input">
            <div>Email</div>
            <InputText @bind-Value="user.Email" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="form_input">
            <div>Age</div>
            <InputNumber @bind-Value="user.Age" />   
            <ValidationMessage For="@(() => user.Age)" />
        </div>
        <div class="form_input">
            <div>Weight</div>
            <InputNumber @bind-Value="user.Weight" />  
            <ValidationMessage For="@(() => user.Weight)" />
        </div>
        <button class="update_button" type="submit">Update</button>
        <button class="cancel_button" type="button" @onclick="Cancel">Cancel</button>
    </EditForm>
</div>

@code {
    User user = new User();
    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        int Id = Convert.ToInt32(id);
        user = await user_repo.GetById(Id);
    }

    void Submit()
    {
        user_repo.Update(user);
        NavManager.NavigateTo("/users");
    }
    void Cancel()
    {
        NavManager.NavigateTo("/users");
    }
}