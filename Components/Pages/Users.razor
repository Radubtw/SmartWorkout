@page "/users"
@inject IGenericRepository<User> user_repo
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject IMatDialogService MatDialogService

@rendermode InteractiveServer
@using BlazorBootstrap
@using SmartWorkoutDataAccess.Entities
@using SmartWorkoutDataAccess

@using SmartWorkoutDataAccess.Repositories
@using MatBlazor
<PageTitle>Users</PageTitle>
<div class="header">
    <div class="title">Users</div>
    <div class="search_add_container">
        <div class="search_container">
            <input class="search_input" @bind="searchQuery" placeholder="Search..." />
            <button class="search_button" @onclick="Search">Search</button>
        </div>
        <button type="button" class="add_user_button" @onclick="AddUser">Add User</button>
    </div>
</div>
@if (DisplayAlert)
{
    <div>
        <Alert @ref="warningAlert" Color="AlertColor.Warning">
            <strong>Holy guacamole!</strong> You should check in on some of those fields below. <Button Color="ButtonColor.Primary" @onclick="CloseAlert">Close</Button>
        </Alert>
    </div>
}
@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    foreach (var user in users){
        <div class="container">
            <div class="image">
                <img src="/Images/User_icon.png" alt="User Image" />
            </div>
            <div class="details">
                <div class="component">Name: @user.Name</div>
                <div class="component">Surname: @user.Surname</div>
                <div class="component">Phone: @if (user.Phone != null)
                    {
                        @user.Phone
                    }
                    else
                    {
                        <span>No data</span>
                    }</div>
                <div class="component">Email: @if (user.Email != null)
                    {
                        @user.Email
                    }
                    else
                    {
                        <span>No data</span>
                    }</div>
                <div class="component">Age: @if (user.Age != null)
                    {
                        @user.Age
                    }
                    else
                    {
                        <span>No data</span>
                    }</div>
                <div class="component">Weight: @if (user.Weight != null)
                    {
                        @user.Weight
                    }
                    else
                    {
                        <span>No data</span>
                    }
                    </div>
                <div class="buttons_div">
                    <button type="button" class="update_button" @onclick="() => UpdateUser(user.Id)">Edit</button>
                    <button type="button" class="delete_button" @onclick="() => DeleteUser(user.Id)">Delete</button>
                </div>
                <button type="button" class="view_workouts_button" @onclick="()=>ViewWorkouts(user.Id)">View Workouts</button>
            </div>
        </div>
    }
}



@code {
    private IEnumerable<User>? users;
    private string searchQuery = "";
    private int userIdToDelete;
    public bool DisplayAlert { get; set; }

    Alert warningAlert;
    private async Task CloseAlert() => await warningAlert?.CloseAsync();


    protected override async Task OnInitializedAsync()
    {
        users = await user_repo.GetAll();
    }
    void AddUser()
    {
        NavManager.NavigateTo("/addUserForm");
    }
    void UpdateUser(int id)
    {
        NavManager.NavigateTo($"/updateUserFormId={id}");
    }

    async void DeleteUser(int id)
    {
        DisplayAlert = true;
        user_repo.Delete(id);
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
        StateHasChanged();
    }
    void ViewWorkouts(int id)
    {
        NavManager.NavigateTo($"/workoutsUserId={id}");
    }
    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            users = await user_repo.GetAll();
        }
        else
        {
            users = (await user_repo.GetAll())
                .Where(u => u.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            u.Surname.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                            u.Id.ToString().Equals(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }   
}   
    